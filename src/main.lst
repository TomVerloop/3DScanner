	.cpu cortex-m0
	.fpu softvfp
	.eabi_attribute 20, 1
	.eabi_attribute 21, 1
	.eabi_attribute 23, 3
	.eabi_attribute 24, 1
	.eabi_attribute 25, 1
	.eabi_attribute 26, 1
	.eabi_attribute 30, 4
	.eabi_attribute 34, 0
	.eabi_attribute 18, 4
	.code	16
	.file	"main.c"
	.section	.text.stepperSetSpeed,"ax",%progbits
	.align	1
	.global	stepperSetSpeed
	.code	16
	.thumb_func
	.type	stepperSetSpeed, %function
stepperSetSpeed:
	mov	r3, #100
	mul	r0, r3
	@ sp needed
	str	r0, [r1, #16]
	bx	lr
	.size	stepperSetSpeed, .-stepperSetSpeed
	.section	.text.stepperGetPosition,"ax",%progbits
	.align	1
	.global	stepperGetPosition
	.code	16
	.thumb_func
	.type	stepperGetPosition, %function
stepperGetPosition:
	ldr	r0, [r0, #8]
	@ sp needed
	bx	lr
	.size	stepperGetPosition, .-stepperGetPosition
	.section	.text.stepperGetRotation,"ax",%progbits
	.align	1
	.global	stepperGetRotation
	.code	16
	.thumb_func
	.type	stepperGetRotation, %function
stepperGetRotation:
	ldr	r0, [r0, #12]
	@ sp needed
	bx	lr
	.size	stepperGetRotation, .-stepperGetRotation
	.section	.text.stepperSetHome,"ax",%progbits
	.align	1
	.global	stepperSetHome
	.code	16
	.thumb_func
	.type	stepperSetHome, %function
stepperSetHome:
	mov	r3, #0
	str	r3, [r0, #8]
	@ sp needed
	bx	lr
	.size	stepperSetHome, .-stepperSetHome
	.section	.text.stepperSetZero,"ax",%progbits
	.align	1
	.global	stepperSetZero
	.code	16
	.thumb_func
	.type	stepperSetZero, %function
stepperSetZero:
	mov	r3, #0
	str	r3, [r0, #12]
	@ sp needed
	bx	lr
	.size	stepperSetZero, .-stepperSetZero
	.section	.text.stepMotor,"ax",%progbits
	.align	1
	.global	stepMotor
	.code	16
	.thumb_func
	.type	stepMotor, %function
stepMotor:
	push	{r3, lr}
	cmp	r0, #3
	bhi	.L6
	ldmia	r1!, {r2, r3}
	bl	__gnu_thumb1_case_uqi
.L9:
	.byte	(.L8-.L9)/2
	.byte	(.L10-.L9)/2
	.byte	(.L11-.L9)/2
	.byte	(.L12-.L9)/2
	.align	1
.L8:
	uxtb	r0, r2
	mov	r1, #10
	b	.L13
.L10:
	uxtb	r0, r2
	mov	r1, #6
	b	.L13
.L11:
	uxtb	r0, r2
	mov	r1, #5
	b	.L13
.L12:
	uxtb	r0, r2
	mov	r1, #9
.L13:
	lsl	r1, r1, r3
	uxtb	r1, r1
	bl	MCP23017_writereg
.L6:
	@ sp needed
	pop	{r3, pc}
	.size	stepMotor, .-stepMotor
	.section	.text.stepperStep,"ax",%progbits
	.align	1
	.global	stepperStep
	.code	16
	.thumb_func
	.type	stepperStep, %function
stepperStep:
	asr	r2, r0, #31
	push	{r4, r5, r6, lr}
	add	r5, r0, r2
	mov	r6, r0
	mov	r4, r1
	eor	r5, r2
.L16:
	cmp	r5, #0
	beq	.L23
	ldr	r0, [r4, #16]
	bl	delay
	ldr	r2, [r4, #8]
	ldr	r3, [r4, #12]
	cmp	r6, #0
	ble	.L17
	add	r2, r2, #1
	str	r2, [r4, #8]
	ldr	r2, [r4, #20]
	add	r3, r3, #1
	str	r3, [r4, #12]
	cmp	r3, r2
	bne	.L18
	mov	r3, #0
	b	.L22
.L17:
	sub	r2, r2, #1
	str	r2, [r4, #8]
	cmp	r3, #0
	bne	.L19
	ldr	r3, [r4, #20]
	str	r3, [r4, #12]
.L19:
	ldr	r3, [r4, #12]
	sub	r3, r3, #1
.L22:
	str	r3, [r4, #12]
.L18:
	ldr	r0, .L24
	ldr	r2, [r4, #12]
	sub	r5, r5, #1
	and	r0, r2
	bpl	.L20
	mov	r3, #4
	sub	r0, r0, #1
	neg	r3, r3
	orr	r0, r3
	add	r0, r0, #1
.L20:
	mov	r1, r4
	bl	stepMotor
	b	.L16
.L23:
	@ sp needed
	pop	{r4, r5, r6, pc}
.L25:
	.align	2
.L24:
	.word	-2147483645
	.size	stepperStep, .-stepperStep
	.section	.text.stepperMoveHome,"ax",%progbits
	.align	1
	.global	stepperMoveHome
	.code	16
	.thumb_func
	.type	stepperMoveHome, %function
stepperMoveHome:
	push	{r3, lr}
	ldr	r3, [r0, #8]
	mov	r1, r0
	neg	r0, r3
	bl	stepperStep
	@ sp needed
	pop	{r3, pc}
	.size	stepperMoveHome, .-stepperMoveHome
	.section	.text.stepperMoveZero,"ax",%progbits
	.align	1
	.global	stepperMoveZero
	.code	16
	.thumb_func
	.type	stepperMoveZero, %function
stepperMoveZero:
	push	{r3, lr}
	ldr	r3, [r0, #12]
	mov	r1, r0
	cmp	r3, #0
	bne	.L27
	ldr	r0, [r0, #20]
	bl	stepperStep
.L27:
	@ sp needed
	pop	{r3, pc}
	.size	stepperMoveZero, .-stepperMoveZero
	.section	.text.stepperInit,"ax",%progbits
	.align	1
	.global	stepperInit
	.code	16
	.thumb_func
	.type	stepperInit, %function
stepperInit:
	push	{r3, r4, r5, r6, r7, lr}
	mov	r7, r0
	mov	r0, #0
	mov	r1, r0
	bl	MCP23017_writereg
	mov	r1, #0
	mov	r0, #1
	bl	MCP23017_writereg
	mov	r1, #0
	mov	r0, #18
	bl	MCP23017_writereg
	mov	r1, #0
	mov	r0, #19
	bl	MCP23017_writereg
	mov	r0, #24
	bl	malloc
	ldr	r3, .L30
	mov	r4, #0
	str	r0, [r3]
	mov	r3, #19
	mov	r6, r0
	str	r7, [r0, #20]
	str	r3, [r0]
	str	r4, [r0, #4]
	str	r4, [r0, #8]
	str	r4, [r0, #12]
	mov	r0, #24
	bl	malloc
	ldr	r3, .L30+4
	mov	r5, r0
	str	r0, [r3]
	mov	r3, #19
	str	r3, [r0]
	mov	r3, #4
	str	r7, [r0, #20]
	str	r3, [r0, #4]
	str	r4, [r0, #8]
	str	r4, [r0, #12]
	mov	r0, #24
	bl	malloc
	ldr	r3, .L30+8
	str	r7, [r0, #20]
	str	r0, [r3]
	mov	r3, #18
	str	r3, [r0]
	ldr	r3, .L30+12
	str	r4, [r0, #4]
	str	r3, [r6, #16]
	str	r3, [r5, #16]
	str	r4, [r0, #8]
	str	r4, [r0, #12]
	str	r3, [r0, #16]
	@ sp needed
	pop	{r3, r4, r5, r6, r7, pc}
.L31:
	.align	2
.L30:
	.word	step1
	.word	step2
	.word	step3
	.word	12000
	.size	stepperInit, .-stepperInit
	.section	.text.startup.main,"ax",%progbits
	.align	1
	.global	main
	.code	16
	.thumb_func
	.type	main, %function
main:
	push	{r3, lr}
	bl	timer_init
	mov	r0, #64
	bl	stepperInit
.L33:
	ldr	r3, .L34
	mov	r0, #128
	ldr	r1, [r3]
	lsl	r0, r0, #4
	bl	stepperStep
	b	.L33
.L35:
	.align	2
.L34:
	.word	step1
	.size	main, .-main
	.comm	step3,4,4
	.comm	step2,4,4
	.comm	step1,4,4
	.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.3 20140228 (release) [ARM/embedded-4_8-branch revision 208322]"
